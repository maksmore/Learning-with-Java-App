name: Docker-Image-CI

env:
  AWS_REGION  : "eu-west-1"
  IMAGE_NAME  : "diploma"
  APP_VERSION :  "v0.0.1"
  WORKING_DIRECTORY: ./it-specialty

on:
  push:
    branches: [ '*' ]
    # paths: [ "./it-specialty/*" ]

jobs:

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and export
      uses: docker/build-push-action@v2
      id:   build-image
      with:
        context: ./it-specialty
        tags: ${{ env.IMAGE_NAME }}:${{ env.APP_VERSION }}
        outputs: type=docker,dest=/tmp/${{ env.IMAGE_NAME }}.tar
    
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.IMAGE_NAME }}
        path: /tmp/${{ env.IMAGE_NAME }}.tar

  test:
    runs-on: ubuntu-latest
    env:
        POSTGRES_USER:     ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}
        SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
        SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Testing
        run: docker compose up -d

      - name: Port testing
        run: |
          sleep 15
          telnet localhost 8080 &
          echo "The connection is established!"
      
      - name: First REST API with cURL Testing
        uses: indiesdev/curl@v1.1
        id: api
        with:
          url: http://localhost:8080/api/v1/specialty
          method: "POST"
          accept: 200,201,204
          headers: '{ "Content-Type": "application/json" }'
          body: '{ "name": "maintenance" }'
          timeout: 60000
          log-response: true
      
      - name: Second REST API with cURL Testing
        uses: indiesdev/curl@v1.1
        id: api2
        with:
          url: http://localhost:8080/api/v1/specialty
          method: "POST"
          accept: 200,201,204
          headers: '{ "Content-Type": "application/json" }'
          body: '{ "name": "developer" }'
          timeout: 60000
          log-response: true
      
      - name: "Use response"
        run: echo ${{ steps.api.outputs.response }}

      - name: Serviceability Testing With Code Response
        run: ./serviceability_script.sh

  
  publish:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.IMAGE_NAME }}
          path: /tmp
      
      - name: Load image
        run: |
          docker load --input /tmp/${{ env.IMAGE_NAME }}.tar
          docker image ls -a

      - name: Configure my AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id     : ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region            : ${{ env.AWS_REGION }}
      
      - name: Authentication Docker Client to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS \
          --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        
      - name: Push to AWS ECR
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.APP_VERSION }} \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ env.APP_VERSION }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ env.APP_VERSION }}

---

name: Docker-Image-CD

env:
  AWS_REGION:          "eu-west-1"
  APP_VERSION:         "v0.0.1"                  # set this to your preferred AWS region, e.g. us-west-1
  IMAGE_NAME:          "diploma"
  ECR_REPOSITORY:      "diploma"           # set this to your Amazon ECR repository name
  ECS_SERVICE:         "diploma"                 # set this to your Amazon ECS service name
  ECS_CLUSTER:         "diploma"                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: "diploma"
  CONTAINER_NAME:      "diploma-container"

on:
  pull_request:
    branches: [ master ]

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure my AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id     : ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region            : ${{ env.AWS_REGION }}

      - name: Authentication Docker Client to AWS ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS \
          --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ env.APP_VERSION }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true